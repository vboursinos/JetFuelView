plugins {
    id "co.riiid.gradle" version "0.4.2"
}
plugins {
    id "org.sonarqube" version "5.0.0.4638"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'distribution'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8

ext {
    javafxVersion = '19.0.2.1'
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation 'org.tinyjee.jgraphx:jgraphx:3.4.1.3'
    implementation('org.springframework.boot:spring-boot-starter:1.5.15.RELEASE') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    implementation 'org.springframework:spring-messaging:4.3.18.RELEASE'
    implementation 'org.springframework:spring-websocket:4.3.15.RELEASE'
    implementation 'org.apache.httpcomponents:httpclient:4.5.3'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.6.0-rc2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.6.0-rc2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.6.0-rc2'
    implementation 'org.controlsfx:controlsfx:8.40.11'
    implementation 'org.mockito:mockito-core:1.10.19'
    implementation("org.apache.logging.log4j:log4j-api:2.1") { exclude group: '*' }
    implementation("org.apache.logging.log4j:log4j-core:2.1") { exclude group: '*' }
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:2.1") { exclude group: '*' }
    implementation("org.apache.logging.log4j:log4j-jcl:2.1") { exclude group: '*' }
    implementation("org.apache.logging.log4j:log4j-1.2-api:2.1") { exclude group: '*' }
    implementation("org.slf4j:slf4j-api:1.7.25") { exclude group: '*' }
    implementation "javax.annotation:javax.annotation-api:1.3.2"

    implementation "org.openjfx:javafx-base:$javafxVersion:win"
    implementation "org.openjfx:javafx-controls:$javafxVersion:win"
    implementation "org.openjfx:javafx-fxml:$javafxVersion:win"
    implementation "org.openjfx:javafx-graphics:$javafxVersion:win"
    implementation "org.openjfx:javafx-web:$javafxVersion:win"
    implementation "org.openjfx:javafx-swing:$javafxVersion:win"

    implementation "org.openjfx:javafx-base:$javafxVersion:linux"
    implementation "org.openjfx:javafx-controls:$javafxVersion:linux"
    implementation "org.openjfx:javafx-fxml:$javafxVersion:linux"
    implementation "org.openjfx:javafx-graphics:$javafxVersion:linux"
    implementation "org.openjfx:javafx-web:$javafxVersion:linux"
    implementation "org.openjfx:javafx-swing:$javafxVersion:linux"

    implementation "org.openjfx:javafx-base:$javafxVersion:mac"
    implementation "org.openjfx:javafx-controls:$javafxVersion:mac"
    implementation "org.openjfx:javafx-fxml:$javafxVersion:mac"
    implementation "org.openjfx:javafx-graphics:$javafxVersion:mac"
    implementation "org.openjfx:javafx-web:$javafxVersion:mac"
    implementation "org.openjfx:javafx-swing:$javafxVersion:mac"


    testImplementation 'junit:junit:4.12'
}

// Extract the version from the properties file
def props = new Properties()
file("src/main/resources/jetfueldataexplorer.properties").withInputStream { props.load(it) }
def version = props.getProperty("version")
def buildLoc = "build/BuildApp/JetFuel-${version}"
def nameToUse = "JetFuelView-${version}"

task BuildApp {
    delete buildLoc
    mkdir buildLoc
    copy {
        from 'src/main/resources/'
        into buildLoc
        include 'log4j2-JetFuel.xml'
        include 'StartJetFuel.bat'
        include 'Notes.txt'
    }
    copy {
        into "${buildLoc}/libs/"
        from configurations.runtimeClasspath
    }
}

task zipBuild(dependsOn: [BuildApp, jar], type: Zip) {
    from 'build/BuildApp'
    include '*'
    include '**/*'
    archiveFileName = "JetFuel-${version}.zip"
    destinationDirectory = file('.')
}

jar {
    archiveBaseName.set("headfront-jetfuelview-${version}")
    destinationDirectory = file("${buildLoc}/libs/")
    manifest {
        attributes(
                'Company': 'Head Front Consulting',
                'App': 'JetFuel',
                'Version': version,
                'ContactEmail': 'deepakcdo@gmail.com',
                'ContactNumber': '+44 7958 707 212',
                'Owner': 'Deepak Dhayatker',
                'Web': 'http://headfront.co.uk/'
        )
    }
}

distributions {
    main {
        contents {
            from 'bin/StartJetFuelView.bat'
            from 'bin/StartJetFuelExplorer.bat'
            from 'Notes.txt'
            from 'ReadMe.txt'
            into('libs') {
                from jar
                from configurations.runtimeClasspath
            }
            into('config') {
                from 'config/Example-UAT.properties'
                from 'src/main/resources/log4j2-JetFuelView.xml'
            }
            into('bin') {
                from 'bin/StartJetFuelExplorerDirect.bat'
            }
        }
    }
}

//github {
//    owner = 'deepakcdo'
//    repo = 'JetFuelView'
//    token = JetFuelViewGitHubToken
//    tagName = nameToUse
//    targetCommitish = 'master'
//    body = "Latest Stable release"
//    assets = [
//            "build/distributions/${nameToUse}.zip"
//    ]GitHub
//}

tasks.withType(JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs '-Dlog4j.configurationFile=log4j2-JetFuel.xml', '-XX:MaxGCPauseMillis=10', '-XX:SurvivorRatio=4', '-XX:+UseConcMarkSweepGC'
}

task runAmpsPublisher(type: JavaExec) {
    main = 'headfront.amps.AmpsPublisher'
}

task runBbgGateway(type: JavaExec) {
    main = 'headfront.markets.MarketGateway'
    args 'BBG', '2000', '1643'
}

task runTradeWebGateway(type: JavaExec) {
    main = 'headfront.markets.MarketGateway'
    args 'TRADEWEB', '2000', '1337'
}

task runDataExplorerMacPrimary(type: JavaExec) {
    main = 'headfront.dataexplorer.DataExplorer'
    args 'tcp://172.28.231.171:8001/amps/json', '8199', 'UAT', 'false'
}

task runDataExplorerMacBackup(type: JavaExec) {
    main = 'headfront.dataexplorer.DataExplorer'
    args 'tcp://192.168.56.101:9001/amps/json', '8198', 'UAT', 'false'
}

task runDataExplorerMacPrimary_PROD(type: JavaExec) {
    main = 'headfront.dataexplorer.DataExplorer'
    args 'tcp://192.168.56.101:8001/amps/json', '8199', 'PROD', 'false'
}

task runDataExplorerGcp_Primary(type: JavaExec) {
    main = 'headfront.dataexplorer.DataExplorer'
    args 'tcp://35.228.172.118:8001/amps/json', '8199', 'UAT', 'false'
}

task runDataExplorerGcp_Backup(type: JavaExec) {
    main = 'headfront.dataexplorer.DataExplorer'
    args 'tcp://35.228.111.20:8001/amps/json', '8199', 'UAT', 'false'
}

task runJetFuelView(type: JavaExec) {
    main = 'headfront.jetfuelview.JetFuelView'
    args 'JetFuelView'
}

task runJetFuelViewDisableAuth(type: JavaExec) {
    main = 'headfront.jetfuelview.JetFuelView'
    jvmArgs '-DDisableAuth=true'
    args 'JetFuelView'
}

task runJetFuelExplorer(type: JavaExec) {
    main = 'headfront.jetfuelview.JetFuelView'
    args 'JetFuelExplorer'
}

task runJetFuelExplorerDisableAuth(type: JavaExec) {
    main = 'headfront.jetfuelview.JetFuelView'
    jvmArgs '-DDisableAuth=true'
    args 'JetFuelExplorer'
}

task runJetFuelError(type: JavaExec) {
    main = 'headfront.jetfuelview.JetFuelView'
    args 'NoApp'
}

task runJetFuelNone(type: JavaExec) {
    main = 'headfront.jetfuelview.JetFuelView'
}
